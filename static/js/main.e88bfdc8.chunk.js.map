{"version":3,"sources":["components/RulesContainer/styles.ts","components/RulesContainer/index.tsx","components/Header/styles.ts","components/Header/index.tsx","utils/ships.ts","pages/Home/styles.ts","pages/Home/index.tsx","utils/arrangeShipPositions.ts","utils/generateRandomNumber.ts","routes/index.tsx","styles/global.ts","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","RulesContainer","header","Header","MainContainer","main","Board","table","Square","props","isAShipPosition","css","isEmpty","UserMovesContainer","Home","board","Array","fill","useState","clickedCells","setClickedCells","userMoves","setUserMoves","shipsPositions","useMemo","ships","map","size","shipSize","startPos","relativeStartPos","Number","String","slice","canGoRight","canGoUp","canGoDown","availablePositions","push","Math","floor","random","length","_","i","arrangeShipPositions","flat","checkIfSquareIsAShipPosition","useCallback","row","col","position","includes","checkIfSquareIsEmpty","handleBoardCellOnClick","cellNumber","key","uuid","__","j","type","onClick","Routes","path","component","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e88bfdc8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  place-content: center;\n  width: 400px;\n  color: black;\n\n  div {\n    width: 200px;\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n  }\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nconst RulesContainer: React.FC = () => {\n  return (\n    <Container>\n      <div>\n        <h3>How it works</h3>\n        <ul>\n          <li>The board has 5 ships randomly placed:</li>\n          <ul>\n            <li>1x - Size: 5 cells</li>\n          </ul>\n          <ul>\n            <li>1x - Size: 4 cells</li>\n          </ul>\n          <ul>\n            <li>1x - Size: 3 cells</li>\n          </ul>\n          <ul>\n            <li>1x - Size: 2 cells</li>\n          </ul>\n          <ul>\n            <li>1x - Size: 1 cell</li>\n          </ul>\n          <li>Select a cell on the right board</li>\n          <li>If it is a ship the color will change to red. Otherwise, blue</li>\n        </ul>\n      </div>\n    </Container>\n  );\n};\n\nexport default RulesContainer;\n","import styled from 'styled-components';\n\nexport const Container = styled.header`\n  color: black;\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nconst Header: React.FC = () => {\n  return (\n    <Container>\n      <h1>Naval Battle</h1>\n    </Container>\n  );\n};\n\nexport default Header;\n","export default [5, 4, 3, 2, 1];\n","import styled, { css } from 'styled-components';\n\ninterface SquareProps {\n  isAShipPosition: boolean;\n  isEmpty: boolean;\n}\n\nexport const MainContainer = styled.main`\n  display: flex;\n`;\n\nexport const Board = styled.table``;\n\nexport const Square = styled.div<SquareProps>`\n  border: 1px solid #00000060;\n  width: 50px;\n  height: 50px;\n  background-color: #fff;\n\n  ${(props) =>\n    props.isAShipPosition &&\n    css`\n      background-color: red;\n    `};\n\n  ${(props) =>\n    props.isEmpty &&\n    css`\n      background-color: blue;\n    `};\n`;\n\nexport const UserMovesContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  margin: 10px;\n  padding: 20px;\n  border-radius: 50%;\n  background-color: olive;\n  text-align: center;\n\n  p {\n    font-weight: 300;\n  }\n`;\n","import React, { useMemo, useCallback, useState } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport RulesContainer from '../../components/RulesContainer';\nimport Header from '../../components/Header';\n\nimport ships from '../../utils/ships';\nimport generateRandomNumber from '../../utils/generateRandomNumber';\nimport arrangeShipPositions from '../../utils/arrangeShipPositions';\n\nimport { MainContainer, Board, Square, UserMovesContainer } from './styles';\n\nconst Home: React.FC = () => {\n  const board = new Array(10).fill('');\n  const [clickedCells, setClickedCells] = useState<Array<number>>([]);\n  const [userMoves, setUserMoves] = useState(30);\n\n  const shipsPositions = useMemo(() => {\n    const positions = ships.map((size) => {\n      const startPos = generateRandomNumber();\n      const data = arrangeShipPositions(size, startPos);\n      return data;\n    });\n    return positions.flat();\n  }, []);\n\n  const checkIfSquareIsAShipPosition = useCallback(\n    (row, col) => {\n      const position = Number(`${row}${col}`);\n      return (\n        clickedCells.includes(position) && shipsPositions.includes(position)\n      );\n    },\n    [clickedCells, shipsPositions],\n  );\n\n  const checkIfSquareIsEmpty = useCallback(\n    (row, col) => {\n      const position = Number(`${row}${col}`);\n      return (\n        clickedCells.includes(position) && !shipsPositions.includes(position)\n      );\n    },\n    [shipsPositions, clickedCells],\n  );\n\n  const handleBoardCellOnClick = useCallback(\n    (row, col) => {\n      const cellNumber = Number(`${row}${col}`);\n\n      if (userMoves === 0) {\n        return;\n      }\n\n      if (clickedCells.includes(cellNumber)) {\n        return;\n      }\n\n      setClickedCells([...clickedCells, cellNumber]);\n      setUserMoves(userMoves - 1);\n    },\n    [userMoves, clickedCells],\n  );\n\n  return (\n    <>\n      <Header />\n      <MainContainer>\n        <RulesContainer />\n        <Board>\n          <tbody>\n            {board.map((_, i) => (\n              <tr key={uuid()}>\n                {board.map((__, j) => (\n                  <td key={uuid()}>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleBoardCellOnClick(i, j)}\n                    >\n                      <Square\n                        isAShipPosition={checkIfSquareIsAShipPosition(i, j)}\n                        isEmpty={checkIfSquareIsEmpty(i, j)}\n                      />\n                    </button>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </Board>\n      </MainContainer>\n      <UserMovesContainer>\n        <h3>{userMoves}</h3>\n        <p>chances</p>\n      </UserMovesContainer>\n    </>\n  );\n};\n\nexport default Home;\n","export default (shipSize: number, startPos: number): Array<number> => {\n  /**\n   * The range of each row is from 1 to 10\n   */\n\n  const relativeStartPos =\n    startPos <= 10 ? startPos : Number(String(startPos).slice(1, 2));\n\n  /**\n   * Check every possibile position\n   */\n  const canGoLeft = relativeStartPos - shipSize >= 1;\n  const canGoRight = relativeStartPos + shipSize <= 10;\n\n  const canGoUp = startPos - shipSize * 10 >= 1;\n  const canGoDown = startPos + shipSize * 10 <= 100;\n\n  const availablePositions = [];\n\n  if (canGoLeft) availablePositions.push('LEFT');\n  if (canGoRight) availablePositions.push('RIGHT');\n  if (canGoUp) availablePositions.push('UP');\n  if (canGoDown) availablePositions.push('DOWN');\n\n  // Select random position\n\n  const selectedPosition =\n    availablePositions[Math.floor(Math.random() * availablePositions.length)];\n\n  /**\n   * Generate ship position\n   */\n  switch (selectedPosition) {\n    case 'LEFT':\n      return new Array(shipSize).fill('').map((_, i) => startPos - i);\n    case 'RIGHT':\n      return new Array(shipSize).fill('').map((_, i) => startPos + i);\n    case 'UP':\n      return new Array(shipSize).fill('').map((_, i) => startPos - i * 10);\n    case 'DOWN':\n      return new Array(shipSize).fill('').map((_, i) => startPos + i * 10);\n    default:\n      return [];\n  }\n};\n","export default (): number => Math.floor(Math.random() * (100 - 1 + 1)) + 1;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from '../pages/Home';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" component={Home} />\n  </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n  body {\n    background: #eeeeee;\n    color: #FFF;\n    -webkit-font-smoothing: antialised;\n  }\n  body, input, button {\n    font: 16px 'Montserrat', sans-serif;\n  }\n  #root {\n    margin: 0 auto;\n  }\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n  button {\n    cursor: pointer;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/naval-battle\">\n      <Routes />\n      <GlobalStyle />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}